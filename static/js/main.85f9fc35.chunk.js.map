{"version":3,"sources":["components/Todoitem.jsx","components/Todolist.jsx","components/Todoform.jsx","components/Navbar.jsx","App.js","serviceWorker.js","index.js"],"names":["Todoitem","changeColor","setState","darkblue","state","toggleTodo","props","updateTodoFn","todo","deleteTodo","deleteTodoFn","editing","complete","this","className","key","_index","Provider","value","onClick","style","height","width","margin","onDoubleClick","text","onBlur","updatedEntry","type","placeholder","onChange","e","console","log","target","updateEntry","React","Component","Todolist","updateTodo","todos","map","_todo","Todoform","updateInput","submitTodo","preventDefault","addTodoFn","document","getElementById","window","alert","onSubmit","id","size","Navbar","expand","variant","bg","Brand","href","App","componentDidMount","localStorage","getItem","savedTodos","JSON","parse","addTodo","a","completed","setItem","stringify","thisTodo","visibleTodos","index","findIndex","item","splice","completedTodos","push","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.85f9fc35.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { IconContext } from \"react-icons\";\r\nimport { GoChecklist } from \"react-icons/go\";\r\nimport { FaRegTrashAlt } from \"react-icons/fa\";\r\nimport { FaEdit } from \"react-icons/fa\";\r\nimport \"../styles/todostyle.css\";\r\n\r\nclass Todoitem extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      editing: false,\r\n      darkblue: true,\r\n    };\r\n  }\r\n\r\n  changeColor = () => {\r\n    this.setState({ darkblue: !this.state.darkblue });\r\n  };\r\n\r\n  render() {\r\n    let complete = this.state.darkblue ? \"bluebutton\" : \"greenbutton\";\r\n    const { todo } = this.props;\r\n\r\n    return (\r\n      <div className=\"todoItemContainer\" key={this.props._index}>\r\n        <IconContext.Provider value={{ className: complete }}>\r\n          <GoChecklist\r\n            onClick={this.changeColor}\r\n            style={{ height: 32, width: 32, margin: 4 }}\r\n          />\r\n        </IconContext.Provider>\r\n\r\n        {!this.state.editing && (\r\n          <div\r\n            className=\"todoItem\"\r\n            onDoubleClick={() => this.setState({ editing: true })}\r\n          >\r\n            {todo.text}\r\n          </div>\r\n        )}\r\n        <div className=\"options\">\r\n          <IconContext.Provider value={{ className: \"react-icons\" }}>\r\n            <FaRegTrashAlt onClick={this.deleteTodo} />\r\n            <FaEdit onClick={() => this.setState({ editing: true })} />\r\n          </IconContext.Provider>\r\n          {this.state.editing && (\r\n            <div>\r\n              <input\r\n                onBlur={() => {\r\n                  this.setState({ editing: false });\r\n                  todo.text = this.state.updatedEntry;\r\n                }}\r\n                type=\"text\"\r\n                placeholder={todo.text}\r\n                onChange={(e) => {\r\n                  console.log(e.target.value);\r\n                  this.setState({ updatedEntry: e.target.value });\r\n                }}\r\n                value={this.state.updateEntry}\r\n              />\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  toggleTodo = () => {\r\n    this.props.updateTodoFn(this.props.todo);\r\n  };\r\n\r\n  deleteTodo = () => {\r\n    this.props.deleteTodoFn(this.props.todo);\r\n  };\r\n}\r\nexport default Todoitem;\r\n","import React from \"react\";\r\nimport Todoitem from \"./Todoitem\";\r\nimport \"../styles/todostyle.css\";\r\n\r\nclass Todolist extends React.Component {\r\n  render() {\r\n    const { todos } = this.props;\r\n\r\n    return (\r\n      <div>\r\n        {todos.map((_todo, _index) => {\r\n          return (\r\n            <Todoitem\r\n              deleteTodoFn={this.deleteTodo}\r\n              updateTodoFn={this.updateTodo}\r\n              key={_index}\r\n              todo={_todo}\r\n            >\r\n              {_todo}\r\n            </Todoitem>\r\n          );\r\n        })}\r\n      </div>\r\n    );\r\n  }\r\n  updateTodo = (todo) => {\r\n    this.props.updateTodoFn(todo);\r\n  };\r\n\r\n  deleteTodo = (todo) => {\r\n    this.props.deleteTodoFn(todo);\r\n  };\r\n}\r\nexport default Todolist;\r\n","import React from \"react\";\r\nimport { IconContext } from \"react-icons\";\r\nimport { MdAddCircleOutline } from \"react-icons/md\";\r\nimport \"../styles/todostyle.css\";\r\n\r\nclass Todoform extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      todo: \"\",\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"todoFormContainer\">\r\n        <form onSubmit={(e) => this.submitTodo(e)}>\r\n          <input\r\n            id=\"addTodoInput\"\r\n            placeholder=\"Enter a task\"\r\n            size=\"auto\"\r\n            onChange={(e) => this.updateInput(e)}\r\n            type=\"text\"\r\n          ></input>\r\n          <IconContext.Provider value={{ className: \"react-icons\" }}>\r\n            <button type=\"submit\">\r\n              <MdAddCircleOutline />\r\n              Add\r\n            </button>\r\n          </IconContext.Provider>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  updateInput = (e) => {\r\n    this.setState({ todo: e.target.value });\r\n  };\r\n\r\n  submitTodo = (e) => {\r\n    if (this.state.todo !== \"\") {\r\n      e.preventDefault();\r\n      this.props.addTodoFn(this.state.todo);\r\n      document.getElementById(\"addTodoInput\").value = \"\";\r\n      this.setState({ todo: \"\" });\r\n    } else {\r\n      window.alert(\"Enter a task below\");\r\n    }\r\n  };\r\n}\r\nexport default Todoform;\r\n","import React from \"react\";\r\nimport * as BootStrap from \"react-bootstrap\";\r\n\r\nclass Navbar extends React.Component {\r\n    render() {\r\n        return (\r\n            <BootStrap.Navbar expand=\"lg\" variant=\"dark\" bg=\"dark\">\r\n                <BootStrap.Container>\r\n                    <BootStrap.Navbar.Brand href=\"#\">Navbar</BootStrap.Navbar.Brand>\r\n                </BootStrap.Container>\r\n            </BootStrap.Navbar>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Navbar;","import React from \"react\";\r\nimport Todolist from \"./components/Todolist\";\r\nimport Todoform from \"./components/Todoform\";\r\nimport Navbar from \"./components/Navbar\";\r\nimport \"./styles/todostyle.css\";\r\nimport \"./App.css\";\r\n\r\nclass App extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      todos: [],\r\n      completed: [],\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"wrapper\">\r\n        <Navbar />\r\n        <div className=\"greeting\">\r\n          <h1>Welcome to Glitchy-Planner :)</h1>\r\n          <h2>What are your plans today?</h2>\r\n        </div>\r\n        <div className=\"App\">\r\n          <Todoform addTodoFn={this.addTodo} />\r\n          <Todolist\r\n            deleteTodoFn={this.deleteTodo}\r\n            updateTodoFn={this.updateTodo}\r\n            todos={this.state.todos}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  componentDidMount = () => {\r\n    const todos = localStorage.getItem(\"todos\");\r\n    if (todos) {\r\n      const savedTodos = JSON.parse(todos);\r\n      this.setState({ todos: savedTodos });\r\n    } else {\r\n      console.log(\"No todos\");\r\n    }\r\n  };\r\n\r\n  addTodo = async (todo) => {\r\n    await this.setState({\r\n      todos: [\r\n        ...this.state.todos,\r\n        {\r\n          text: todo,\r\n          completed: false,\r\n        },\r\n      ],\r\n    });\r\n    localStorage.setItem(\"todos\", JSON.stringify(this.state.todos));\r\n    console.log(localStorage.getItem(\"todos\"));\r\n  };\r\n  deleteTodo = (thisTodo) => {\r\n    let visibleTodos = this.state.todos; //Sets visibleTodos equal to the todos array from line 10.\r\n    //finds the index in visibleTodos that matches the entry in 'complete' button.\r\n    let index = visibleTodos.findIndex((item) => {\r\n      return item.text === thisTodo.text;\r\n    });\r\n    visibleTodos.splice(index, 1); //Once index is found, use splice to remove the entry from the todos array\r\n    this.setState({ todos: visibleTodos });\r\n    localStorage.setItem(\"todos\", JSON.stringify(visibleTodos));\r\n    // console.log(index);\r\n    // console.log(visibleTodos);\r\n  };\r\n\r\n  updateTodo = (thisTodo) => {\r\n    let completedTodos = this.state.completed; //Sets completedTodos equal to completed array from line 11.\r\n    let visibleTodos = this.state.todos; //Sets visibleTodos equal to the todos array from line 10.\r\n    //finds the index in visibleTodos that matches the entry in 'complete' button.\r\n    let index = visibleTodos.findIndex((item) => {\r\n      return item.text === thisTodo.text; //returns the index when the text i chose is equal to the entry in todos.\r\n    });\r\n    visibleTodos.splice(index, 1); //Once index is found, use splice to remove the entry from the todos array\r\n    completedTodos.push(thisTodo); //Pushes thisTodo into the \"completed\" array.\r\n    this.setState({ todos: visibleTodos });\r\n    localStorage.setItem(\"todos\", JSON.stringify(visibleTodos));\r\n  };\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n ","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}